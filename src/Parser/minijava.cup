/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 19au, 20sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal IF, WHILE, PRINTLN, TRUE, FALSE, CLASS, RETURN, NEW, PUBLIC, STATIC, VOID, MAIN, ELSE, LENGTH, EXTENDS, THIS;

/* operators */
terminal PLUS, BECOMES, MINUS, MULTIPLY, AND, LESS, NOT;

/* delimiters */
terminal LPAREN, RPAREN, SEMICOLON, PERIOD, COMMA, LBRACKET, RBRACKET, LCURLY, RCURLY;

/* data types */
terminal INT, BOOLEAN, STRING;

/* identifiers */
terminal String IDENTIFIER;
terminal Integer INTEGER_LITERAL;

/* Nonterminals (constructed by parser): */

nonterminal Program Program;
nonterminal Statement Statement;
nonterminal Assign AssignStatement;
nonterminal Display DisplayStatement;
nonterminal Exp Expression;
nonterminal Identifier Identifier;
nonterminal StatementList StatementList;
nonterminal ExpList ExpressionList;
nonterminal Type Type;
nonterminal VarDecl VarDeclaration;
nonterminal MainClass MainClass;
nonterminal ClassDeclExtends ClassDeclExtends;
nonterminal ClassDeclSimple ClassDeclSimple;
nonterminal Formal Formal;
nonterminal FormalList FormalList;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal ClassDeclList ClassDeclList;
nonterminal ClassDecl ClassDecl;

/* Precedence declarations: */

precedence left IDENTIFIER;
precedence left BECOMES;
precedence left AND;
precedence left NOT;
precedence left LESS;
precedence left PLUS, MINUS;
precedence left MULTIPLY;


/* Productions: */

/*
Program ::= Statement:s
            {: List<Statement> p = new LinkedList<Statement>();
               p.add(s);
               RESULT = p; :}
        | Program:p Statement:s
            {: p.add(s); RESULT = p; :};
*/

Program ::= MainClass:m
            {: RESULT = new Program(m, new ClassDeclList(new Location(0, 0)), mxleft); :}
        | MainClass:m ClassDeclList:d
            {: RESULT = new Program(m, d, mxleft); :};

MainClass  ::= CLASS Identifier:id1 LCURLY PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier:id2 RPAREN LCURLY Statement:s RCURLY RCURLY
               {: RESULT = new MainClass(id1, id2, s, id1xleft); :};

ClassDeclList ::= ClassDecl:c
                    {: ClassDeclList classDeclList= new ClassDeclList(new Location(0, 0));
                    classDeclList.add(c);
                    RESULT = classDeclList; :}
                | ClassDecl:c ClassDeclList:cl
                    {: cl.add(c); RESULT = cl; :};

ClassDecl ::= ClassDeclExtends:cl
                    {: RESULT = cl; :}
                | ClassDeclSimple:cl
                    {: RESULT = cl; :};

ClassDeclExtends ::= CLASS Identifier:id1 EXTENDS Identifier:id2 LCURLY RCURLY
                     {: RESULT = new ClassDeclExtends(id1, id2, new VarDeclList(new Location(0,0)), new MethodDeclList(new Location(0,0)), id1xleft); :}
                   | CLASS Identifier:id1 EXTENDS Identifier:id2 LCURLY VarDeclList:VL RCURLY
                     {: RESULT = new ClassDeclExtends(id1, id2, VL, new MethodDeclList(new Location(0,0)), id1xleft); :}
                   | CLASS Identifier:id1 EXTENDS Identifier:id2 LCURLY MethodDeclList:ML RCURLY
                     {: RESULT = new ClassDeclExtends(id1, id2, new VarDeclList(new Location(0,0)), ML, id1xleft); :}
                   | CLASS Identifier:id1 EXTENDS Identifier:id2 LCURLY VarDeclList:VL MethodDeclList:ML RCURLY
                     {: RESULT = new ClassDeclExtends(id1, id2, VL, ML, id1xleft); :};

ClassDeclSimple ::= CLASS Identifier:id LCURLY RCURLY
                    {: RESULT = new ClassDeclSimple(id, new VarDeclList(new Location(0,0)), new MethodDeclList(new Location(0,0)), idxleft); :}
                 |  CLASS Identifier:id LCURLY VarDeclList:VL RCURLY
                    {: RESULT = new ClassDeclSimple(id, VL, new MethodDeclList(new Location(0,0)), idxleft); :}
                 |  CLASS Identifier:id LCURLY MethodDeclList:ML RCURLY
                    {: RESULT = new ClassDeclSimple(id, new VarDeclList(new Location(0,0)), ML, idxleft); :}
                 | CLASS Identifier:id LCURLY VarDeclList:VL MethodDeclList:ML RCURLY
                    {: RESULT = new ClassDeclSimple(id, VL,ML, idxleft); :};

Statement   ::= AssignStatement:s
                {: RESULT = s; :}
            | DisplayStatement:s
                {: RESULT = s; :}
            | IF LPAREN Expression:arg1 RPAREN Statement:arg2 ELSE Statement:arg3
                {:RESULT = new If(arg1, arg2, arg3, arg1xleft); :}
            | WHILE LPAREN Expression:arg1 RPAREN Statement:arg2
                {: RESULT = new While(arg1, arg2, arg1xleft); :}
            | PRINTLN LPAREN Expression:arg1 RPAREN SEMICOLON
                {: RESULT = new Print(arg1, arg1xleft); :}
            | Identifier:id LBRACKET Expression:arg1 RBRACKET BECOMES Expression:arg2 SEMICOLON
                {: RESULT = new ArrayAssign(id, arg1, arg2, idxleft); :}
            | LCURLY StatementList:SL RCURLY
                {: RESULT = new Block(SL, SLxleft); :}
            | LCURLY RCURLY
                {: RESULT = new Block(new StatementList(new Location(0,0)), new Location(0,0)); :};

StatementList ::= Statement:s
                  {: StatementList SL = new StatementList(new Location(0,0));
                     SL.add(s);
                     RESULT = SL; :}
                | Statement:s StatementList:SL
                  {: SL.add(s); RESULT = SL; :};

AssignStatement ::= Identifier:id BECOMES Expression:expr SEMICOLON
                    {: RESULT = new Assign(id, expr, idxleft); :};

Identifier  ::= IDENTIFIER:id
                {: RESULT = new Identifier(id, idxleft); :};

Expression  ::= Identifier:name
            {: RESULT = new IdentifierExp(name.toString(), namexleft); :}
        | Expression:arg1 PLUS Expression:arg2
            {: RESULT = new Plus(arg1, arg2, arg1xleft); :}
        | LPAREN Expression:expr RPAREN
            {: RESULT = expr; :}
        | Expression:arg1 MINUS Expression:arg2
            {: RESULT = new Minus(arg1, arg2, arg1xleft); :}
        | Expression:arg1 AND Expression:arg2
            {: RESULT = new And(arg1, arg2, arg1xleft); :}
        | Expression:arg1 MULTIPLY Expression:arg2
            {: RESULT = new Times(arg1, arg2, arg1xleft); :}
        | Expression:arg1 LESS Expression:arg2
            {: RESULT = new LessThan(arg1, arg2, arg1xleft); :}
        | Expression:arg1 LBRACKET Expression:arg2 RBRACKET
            {: RESULT = new ArrayLookup(arg1, arg2, arg1xleft); :}
        | Expression:arg1 PERIOD LENGTH
            {: RESULT = new ArrayLength(arg1, arg1xleft); :}
        | NEW INT LBRACKET Expression:arg1 RBRACKET
            {: RESULT = new NewArray(arg1, arg1xleft); :}
        | NEW Identifier:id LPAREN RPAREN
            {: RESULT = new NewObject(id, idxleft); :}
        | NOT Expression:arg1
            {: RESULT = new Not(arg1, arg1xleft); :}
        | TRUE:t
            {: RESULT = new True(txleft); :}
        | FALSE:f
            {: RESULT = new False(fxleft); :}
        | INTEGER_LITERAL:num
            {: RESULT = new IntegerLiteral(num, numxleft); :}
        | Expression:arg1 PERIOD Identifier:id LPAREN RPAREN
            {: RESULT = new Call(arg1, id, new ExpList(new Location(0,0)), arg1xleft); :}
        | Expression:arg1 PERIOD Identifier:id LPAREN ExpressionList:exprL RPAREN
            {: RESULT = new Call(arg1, id, exprL, arg1xleft); :}
        | THIS:t
            {: RESULT = new This(txleft); :};

Type ::= INT:i
            {: RESULT = new IntegerType(ixleft); :}
        | BOOLEAN:b
            {: RESULT = new BooleanType(bxleft); :}
        | INT:i LBRACKET RBRACKET
            {: RESULT = new IntArrayType(ixleft); :}
        | Identifier:i
            {: RESULT = new IdentifierType(i.toString(), ixleft); :};

ExpressionList ::= Expression:arg1
                   {: ExpList exprL = new ExpList(new Location(0,0));
                      exprL.add(arg1);
                      RESULT = exprL; :}
                | Expression:expr1 COMMA ExpressionList:exprL
                    {: exprL.add(expr1); RESULT = exprL; :};

VarDeclaration ::= Type:t Identifier:id SEMICOLON
                {: RESULT = new VarDecl(t,id, txleft); :};

VarDeclList ::= VarDeclaration:v
                {: VarDeclList vList = new VarDeclList(new Location(0,0));
                   vList.add(v);
                   RESULT = vList; :}
            | VarDeclaration:v VarDeclList:vList
                {: vList.add(v); RESULT = vList; :};

Formal ::= Type:t Identifier:id
           {: RESULT = new Formal(t, id, idxleft); :};

FormalList ::= Formal:f
                {: FormalList fList = new FormalList(new Location(0,0));
                   fList.add(f);
                   RESULT = fList; :}
             |  Formal:f COMMA FormalList:fList
                {: fList.add(f); RESULT = fList; :};

MethodDecl ::= PUBLIC Type:t Identifier:id LPAREN FormalList:FL RPAREN LCURLY RETURN Expression:arg1 SEMICOLON RCURLY
               {: RESULT = new MethodDecl(t,id, FL, new VarDeclList(new Location(0,0)), new StatementList(new Location(0,0)), arg1, txleft); :}
             | PUBLIC Type:t Identifier:id LPAREN FormalList:FL RPAREN LCURLY VarDeclList:VL RETURN Expression:arg1 SEMICOLON RCURLY
               {: RESULT = new MethodDecl(t, id, FL, VL, new StatementList(new Location(0,0)), arg1, txleft); :}
             | PUBLIC Type:t Identifier:id LPAREN FormalList:FL RPAREN LCURLY VarDeclList:VL StatementList:SL RETURN Expression:arg1 SEMICOLON RCURLY
               {: RESULT = new MethodDecl(t, id, FL, VL, SL, arg1, txleft); :}
             | PUBLIC Type:t Identifier:id LPAREN RPAREN LCURLY RETURN Expression:arg1 SEMICOLON RCURLY
               {: RESULT = new MethodDecl(t, id, new FormalList(new Location(0,0)), new VarDeclList(new Location(0,0)), new StatementList(new Location(0,0)), arg1, txleft); :}
             | PUBLIC Type:t Identifier:id LPAREN RPAREN LCURLY VarDeclList:VL RETURN Expression:arg1 SEMICOLON RCURLY
               {: RESULT = new MethodDecl(t, id, new FormalList(new Location(0,0)), VL, new StatementList(new Location(0,0)), arg1, txleft); :}
             | PUBLIC Type:t Identifier:id LPAREN RPAREN LCURLY  StatementList:SL RETURN Expression:arg1 SEMICOLON RCURLY
               {: RESULT = new MethodDecl(t, id, new FormalList(new Location(0,0)), new VarDeclList(new Location(0,0)), SL, arg1, txleft); :}
             | PUBLIC Type:t Identifier:id LPAREN RPAREN LCURLY VarDeclList:VL StatementList:SL RETURN Expression:arg1 SEMICOLON RCURLY
               {:RESULT = new MethodDecl(t, id, new FormalList(new Location(0,0)), VL, SL, arg1, txleft); :}
             | PUBLIC Type:t Identifier:id LPAREN FormalList:FL RPAREN LCURLY StatementList:SL RETURN Expression:arg1 SEMICOLON RCURLY
               {:RESULT = new MethodDecl(t, id, new FormalList(new Location(0,0)), new VarDeclList(new Location(0,0)), SL, arg1, txleft); :};

MethodDeclList ::= MethodDecl:ML
                    {: MethodDeclList mlList = new MethodDeclList(new Location(0,0));
                    mlList.add(ML);
                    RESULT = mlList; :}
                | MethodDecl:ML MethodDeclList:mlList
                    {: mlList.add(ML); RESULT = mlList; :};